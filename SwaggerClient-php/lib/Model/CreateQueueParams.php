<?php
/**
 * CreateQueueParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CreateQueueParams Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateQueueParams implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateQueueParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'greeting' => 'object',
        'hold_music' => 'object',
        'max_hold_time' => 'int',
        'caller_id_type' => 'string',
        'ring_time' => 'int',
        'members' => 'object[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'greeting' => 'greeting',
        'hold_music' => 'hold_music',
        'max_hold_time' => 'max_hold_time',
        'caller_id_type' => 'caller_id_type',
        'ring_time' => 'ring_time',
        'members' => 'members'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'greeting' => 'setGreeting',
        'hold_music' => 'setHoldMusic',
        'max_hold_time' => 'setMaxHoldTime',
        'caller_id_type' => 'setCallerIdType',
        'ring_time' => 'setRingTime',
        'members' => 'setMembers'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'greeting' => 'getGreeting',
        'hold_music' => 'getHoldMusic',
        'max_hold_time' => 'getMaxHoldTime',
        'caller_id_type' => 'getCallerIdType',
        'ring_time' => 'getRingTime',
        'members' => 'getMembers'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['greeting'] = isset($data['greeting']) ? $data['greeting'] : null;
        $this->container['hold_music'] = isset($data['hold_music']) ? $data['hold_music'] : null;
        $this->container['max_hold_time'] = isset($data['max_hold_time']) ? $data['max_hold_time'] : null;
        $this->container['caller_id_type'] = isset($data['caller_id_type']) ? $data['caller_id_type'] : null;
        $this->container['ring_time'] = isset($data['ring_time']) ? $data['ring_time'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of queue
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets greeting
     * @return object
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     * @param object $greeting Recording lookup object
     * @return $this
     */
    public function setGreeting($greeting)
    {
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets hold_music
     * @return object
     */
    public function getHoldMusic()
    {
        return $this->container['hold_music'];
    }

    /**
     * Sets hold_music
     * @param object $hold_music Recording lookup object
     * @return $this
     */
    public function setHoldMusic($hold_music)
    {
        $this->container['hold_music'] = $hold_music;

        return $this;
    }

    /**
     * Gets max_hold_time
     * @return int
     */
    public function getMaxHoldTime()
    {
        return $this->container['max_hold_time'];
    }

    /**
     * Sets max_hold_time
     * @param int $max_hold_time Max seconds for hold
     * @return $this
     */
    public function setMaxHoldTime($max_hold_time)
    {
        $this->container['max_hold_time'] = $max_hold_time;

        return $this;
    }

    /**
     * Gets caller_id_type
     * @return string
     */
    public function getCallerIdType()
    {
        return $this->container['caller_id_type'];
    }

    /**
     * Sets caller_id_type
     * @param string $caller_id_type Type of caller id
     * @return $this
     */
    public function setCallerIdType($caller_id_type)
    {
        $this->container['caller_id_type'] = $caller_id_type;

        return $this;
    }

    /**
     * Gets ring_time
     * @return int
     */
    public function getRingTime()
    {
        return $this->container['ring_time'];
    }

    /**
     * Sets ring_time
     * @param int $ring_time Number of seconds to ring each member
     * @return $this
     */
    public function setRingTime($ring_time)
    {
        $this->container['ring_time'] = $ring_time;

        return $this;
    }

    /**
     * Gets members
     * @return object[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     * @param object[] $members Extensions or phone numbers
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


