<?php
/**
 * PaymentFull
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentFull Class Doc Comment
 *
 * @category    Class
 * @description The Payment Method Full Object contains the same properties as the Payment Method Summary Object, along with the following:
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentFull implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentFull';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'voip_id' => 'int',
        'status' => 'string',
        'nickname' => 'string',
        'type' => 'string',
        'created_at' => 'int',
        'contact' => '\Swagger\Client\Model\ContactResponse',
        'decline_count' => 'int',
        'next_charge_date' => 'int',
        'updated_at' => 'int',
        'cc_token' => 'string',
        'cc_number' => 'string',
        'cc_exp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'voip_id' => null,
        'status' => null,
        'nickname' => null,
        'type' => null,
        'created_at' => null,
        'contact' => null,
        'decline_count' => null,
        'next_charge_date' => null,
        'updated_at' => null,
        'cc_token' => null,
        'cc_number' => null,
        'cc_exp' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'voip_id' => 'voip_id',
        'status' => 'status',
        'nickname' => 'nickname',
        'type' => 'type',
        'created_at' => 'created_at',
        'contact' => 'contact',
        'decline_count' => 'decline_count',
        'next_charge_date' => 'next_charge_date',
        'updated_at' => 'updated_at',
        'cc_token' => 'cc_token',
        'cc_number' => 'cc_number',
        'cc_exp' => 'cc_exp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'voip_id' => 'setVoipId',
        'status' => 'setStatus',
        'nickname' => 'setNickname',
        'type' => 'setType',
        'created_at' => 'setCreatedAt',
        'contact' => 'setContact',
        'decline_count' => 'setDeclineCount',
        'next_charge_date' => 'setNextChargeDate',
        'updated_at' => 'setUpdatedAt',
        'cc_token' => 'setCcToken',
        'cc_number' => 'setCcNumber',
        'cc_exp' => 'setCcExp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'voip_id' => 'getVoipId',
        'status' => 'getStatus',
        'nickname' => 'getNickname',
        'type' => 'getType',
        'created_at' => 'getCreatedAt',
        'contact' => 'getContact',
        'decline_count' => 'getDeclineCount',
        'next_charge_date' => 'getNextChargeDate',
        'updated_at' => 'getUpdatedAt',
        'cc_token' => 'getCcToken',
        'cc_number' => 'getCcNumber',
        'cc_exp' => 'getCcExp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['voip_id'] = isset($data['voip_id']) ? $data['voip_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['decline_count'] = isset($data['decline_count']) ? $data['decline_count'] : null;
        $this->container['next_charge_date'] = isset($data['next_charge_date']) ? $data['next_charge_date'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['cc_token'] = isset($data['cc_token']) ? $data['cc_token'] : null;
        $this->container['cc_number'] = isset($data['cc_number']) ? $data['cc_number'] : null;
        $this->container['cc_exp'] = isset($data['cc_exp']) ? $data['cc_exp'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Payment Method ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets voip_id
     * @return int
     */
    public function getVoipId()
    {
        return $this->container['voip_id'];
    }

    /**
     * Sets voip_id
     * @param int $voip_id API Account ID
     * @return $this
     */
    public function setVoipId($voip_id)
    {
        $this->container['voip_id'] = $voip_id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status 'primary' = primary card used for billing; 'onfile' = card on file; 'hidden' = deleted card;
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets nickname
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     * @param string $nickname Name of Card
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type 'cc' for credit card
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created_at
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param int $created_at Time payment record is created
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets contact
     * @return \Swagger\Client\Model\ContactResponse
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Swagger\Client\Model\ContactResponse $contact Detail of contact person
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets decline_count
     * @return int
     */
    public function getDeclineCount()
    {
        return $this->container['decline_count'];
    }

    /**
     * Sets decline_count
     * @param int $decline_count Number of times the payment method was declined
     * @return $this
     */
    public function setDeclineCount($decline_count)
    {
        $this->container['decline_count'] = $decline_count;

        return $this;
    }

    /**
     * Gets next_charge_date
     * @return int
     */
    public function getNextChargeDate()
    {
        return $this->container['next_charge_date'];
    }

    /**
     * Sets next_charge_date
     * @param int $next_charge_date Next billing date
     * @return $this
     */
    public function setNextChargeDate($next_charge_date)
    {
        $this->container['next_charge_date'] = $next_charge_date;

        return $this;
    }

    /**
     * Gets updated_at
     * @return int
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param int $updated_at Last time the payment method was updated
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets cc_token
     * @return string
     */
    public function getCcToken()
    {
        return $this->container['cc_token'];
    }

    /**
     * Sets cc_token
     * @param string $cc_token Encrypted credit card token to be used for billing
     * @return $this
     */
    public function setCcToken($cc_token)
    {
        $this->container['cc_token'] = $cc_token;

        return $this;
    }

    /**
     * Gets cc_number
     * @return string
     */
    public function getCcNumber()
    {
        return $this->container['cc_number'];
    }

    /**
     * Sets cc_number
     * @param string $cc_number Credit card number partially masked with xxxxxxxx
     * @return $this
     */
    public function setCcNumber($cc_number)
    {
        $this->container['cc_number'] = $cc_number;

        return $this;
    }

    /**
     * Gets cc_exp
     * @return string
     */
    public function getCcExp()
    {
        return $this->container['cc_exp'];
    }

    /**
     * Sets cc_exp
     * @param string $cc_exp Credit card expiration date
     * @return $this
     */
    public function setCcExp($cc_exp)
    {
        $this->container['cc_exp'] = $cc_exp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


