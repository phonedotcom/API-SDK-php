<?php
/**
 * RuleSetForwardItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RuleSetForwardItem Class Doc Comment
 *
 * @category    Class
 * @description Array of Forward Item Objects. See below for details. Required.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RuleSetForwardItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RuleSetForwardItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'extension' => '\Swagger\Client\Model\ExtensionSummary',
        'number' => 'string',
        'screening' => 'bool',
        'caller_id' => 'string',
        'voice_tag' => 'string',
        'distinctive_ring' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'extension' => 'extension',
        'number' => 'number',
        'screening' => 'screening',
        'caller_id' => 'caller_id',
        'voice_tag' => 'voice_tag',
        'distinctive_ring' => 'distinctive_ring'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'extension' => 'setExtension',
        'number' => 'setNumber',
        'screening' => 'setScreening',
        'caller_id' => 'setCallerId',
        'voice_tag' => 'setVoiceTag',
        'distinctive_ring' => 'setDistinctiveRing'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'extension' => 'getExtension',
        'number' => 'getNumber',
        'screening' => 'getScreening',
        'caller_id' => 'getCallerId',
        'voice_tag' => 'getVoiceTag',
        'distinctive_ring' => 'getDistinctiveRing'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['extension'] = isset($data['extension']) ? $data['extension'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['screening'] = isset($data['screening']) ? $data['screening'] : false;
        $this->container['caller_id'] = isset($data['caller_id']) ? $data['caller_id'] : 'calling_number';
        $this->container['voice_tag'] = isset($data['voice_tag']) ? $data['voice_tag'] : null;
        $this->container['distinctive_ring'] = isset($data['distinctive_ring']) ? $data['distinctive_ring'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['type']) && !preg_match("/phone_number|extension/", $this->container['type'])) {
            $invalid_properties[] = "invalid value for 'type', must be conform to the pattern /phone_number|extension/.";
        }

        if (!is_null($this->container['caller_id']) && !preg_match("/calling_number|called_number/", $this->container['caller_id'])) {
            $invalid_properties[] = "invalid value for 'caller_id', must be conform to the pattern /calling_number|called_number/.";
        }

        if (!is_null($this->container['distinctive_ring']) && !preg_match("/DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/", $this->container['distinctive_ring'])) {
            $invalid_properties[] = "invalid value for 'distinctive_ring', must be conform to the pattern /DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/phone_number|extension/", $this->container['type'])) {
            return false;
        }
        if (!preg_match("/calling_number|called_number/", $this->container['caller_id'])) {
            return false;
        }
        if (!preg_match("/DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/", $this->container['distinctive_ring'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Required. Must equal phone_number or extension.
     * @return $this
     */
    public function setType($type)
    {

        if (!is_null($type) && (!preg_match("/phone_number|extension/", $type))) {
            throw new \InvalidArgumentException("invalid value for $type when calling RuleSetForwardItem., must conform to the pattern /phone_number|extension/.");
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets extension
     * @return \Swagger\Client\Model\ExtensionSummary
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     * @param \Swagger\Client\Model\ExtensionSummary $extension Required if type = \"extension\". Extension that callers should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.
     * @return $this
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number Required if type = \"phone_number\". Phone number that callers should be directed to. Must be a string in E.164 format.
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets screening
     * @return bool
     */
    public function getScreening()
    {
        return $this->container['screening'];
    }

    /**
     * Sets screening
     * @param bool $screening Boolean. Optional. Default is FALSE. Use this to activate call screening. If TRUE, the timeout on the parent action should be at least 30 seconds.
     * @return $this
     */
    public function setScreening($screening)
    {
        $this->container['screening'] = $screening;

        return $this;
    }

    /**
     * Gets caller_id
     * @return string
     */
    public function getCallerId()
    {
        return $this->container['caller_id'];
    }

    /**
     * Sets caller_id
     * @param string $caller_id Optional. Must equal calling_number or called_number. Defines which phone number should be used for Caller ID. Default is calling_number.
     * @return $this
     */
    public function setCallerId($caller_id)
    {

        if (!is_null($caller_id) && (!preg_match("/calling_number|called_number/", $caller_id))) {
            throw new \InvalidArgumentException("invalid value for $caller_id when calling RuleSetForwardItem., must conform to the pattern /calling_number|called_number/.");
        }

        $this->container['caller_id'] = $caller_id;

        return $this;
    }

    /**
     * Gets voice_tag
     * @return string
     */
    public function getVoiceTag()
    {
        return $this->container['voice_tag'];
    }

    /**
     * Sets voice_tag
     * @param string $voice_tag Optional string. If screening = TRUE, this value will be passed into our Text-To-Speech engine and used to inform the caller of who they have reached.
     * @return $this
     */
    public function setVoiceTag($voice_tag)
    {
        $this->container['voice_tag'] = $voice_tag;

        return $this;
    }

    /**
     * Gets distinctive_ring
     * @return string
     */
    public function getDistinctiveRing()
    {
        return $this->container['distinctive_ring'];
    }

    /**
     * Sets distinctive_ring
     * @param string $distinctive_ring Optional. Must equal one of: DEFAULT, STYLE_2, STYLE_3, STYLE_4, STYLE_5, STYLE_6, STYLE_7, STYLE_8, or STYLE_9. Identifies the style of ring tone you will hear when an incoming call is waiting.
     * @return $this
     */
    public function setDistinctiveRing($distinctive_ring)
    {

        if (!is_null($distinctive_ring) && (!preg_match("/DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/", $distinctive_ring))) {
            throw new \InvalidArgumentException("invalid value for $distinctive_ring when calling RuleSetForwardItem., must conform to the pattern /DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/.");
        }

        $this->container['distinctive_ring'] = $distinctive_ring;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


